component ahc "Automatical Height Control Up/Down Input";

description 
"""

""";
 
author "ddd";

license "GPLv2 or greater";

option singleton yes;

// Input Pins
pin in bit 		plasma "Enable plasma mode";



function _;

;;

#include "rtapi_math.h"

FUNCTION(_) {
if(plasma && !oxygen){
    if(enable){
        float min_velocity = requested_vel -(requested_vel*(velocity_tol*0.01));
        if(current_vel > 0 && current_vel >= min_velocity){
			vel_status = 1;
		}
		else {
			vel_status =0;
		}
        
        if(torch_on && arc_ok && vel_status){ // allow correction
            if(torch_down){
                offset -= correction_vel/10000;
            }
            if(torch_up){
                offset += correction_vel/10000;
            }    
            last_z_in = 0;
        }

        z_pos_out = z_pos_in + offset;
        z_fb_out = z_pos_in; // keep axis motor position fb from being confused
    }
    if(!enable){
        z_pos_out = z_pos_in + offset;
        z_fb_out = z_pos_in; // keep axis motor position fb from being confused
    }
}
if(!plasma && oxygen){
	if(enable){
		float min_velocity = requested_vel -(requested_vel*(velocity_tol*0.01));
		if(enable && torch_on){
			vel_status = 1;
		}
		else {
			vel_status =0;
		}
		if(torch_on){ // allow correction
			if(oxtorch_down){
				offset -= correction_vel/10000;
			}
			if(oxtorch_up){
				offset += correction_vel/10000;
			}    
		last_z_in = 0;
		}
		if(!torch_on){ // remove any offset
			float z_diff;
			z_diff = z_pos_in - last_z_in;
				if(z_diff > 0 && offset != 0){ // torch is moving up
					removing_offset = 1;
					if(offset > 0){ // positive offset
						if(offset > z_diff){ // remove some
							offset -= z_diff;
						}
						else {offset = 0;}
					}
				//if(offset < 0){ // negative offset
					//if(offset < z_diff){ // remove some
						//offset += z_diff;
					//}
				//else {offset = 0;}
				//}
				}
            }
            else {removing_offset = 0;}
            last_z_in = z_pos_in;
		}
        z_pos_out = z_pos_in + offset;
        z_fb_out = z_pos_in; // keep axis motor position fb from being confused
    }
    if(!enable){
        z_pos_out = z_pos_in + offset;
        z_fb_out = z_pos_in; // keep axis motor position fb from being confused
        
    }
}
